//app.js
import React from 'react';
import { CssBaseline, Container } from '@mui/material';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Navbar from './components/Navbar';
import EmployeePage from './pages/EmployeePage';
import HomePage from './pages/HomePage';

const App = () => (
  <Router>
    <CssBaseline /> {/* MUI component to normalize and reset default browser styles */}
    <Navbar /> {/* Navigation bar */}
    <Container sx={{ mt: 4 }}>
      <Routes>
        <Route path="/" element={<HomePage />} /> {/* Route for Home page */}
        <Route path="/employees" element={<EmployeePage />} /> {/* Route for Employee management page */}
      </Routes>
    </Container>
  </Router>
);

export default App;

----------------------------------------------------------------------------------

//navbar.js

import React from 'react';
import { AppBar, Toolbar, Typography, Button } from '@mui/material';
import { Link } from 'react-router-dom';

const Navbar = () => (
  <AppBar position="static">
    {/* AppBar provides a top navigation/header bar */}
    <Toolbar>
      {/* Toolbar provides padding and layout for content inside AppBar */}
      <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
        {/* Typography is used for styled text; sx={{ flexGrow: 1 }} pushes buttons to the right */}
        Employee Management
      </Typography>
      <Button color="inherit" component={Link} to="/">
        {/* MUI Button styled to look like text links in the AppBar */}
        Home
      </Button>
      <Button color="inherit" component={Link} to="/employees">
        Employees
      </Button>
    </Toolbar>
  </AppBar>
);

export default Navbar;


--------------------------------------------------------------------------
//empployee form

import React from 'react';
import {
  Dialog, DialogActions, DialogContent, DialogTitle,
  TextField, Button
} from '@mui/material';

const EmployeeForm = ({
  open,
  handleClose,
  handleSubmit,
  formData = {}, // Fallback to empty object
  setFormData,
  validationErrors = {} // Optional: for future form validation
}) => {
  if (!formData || !setFormData) return null; // Ensure props are valid

  return (
    <Dialog open={open} onClose={handleClose}>
       {/* Dialog is a modal window */}
      <DialogTitle>{formData.id ? 'Edit' : 'Add'} Employee</DialogTitle>
      <DialogContent>
         {/* DialogContent holds form fields */}
        <TextField
          margin="dense" label="Full Name" fullWidth
          value={formData.fullName || ''}
          onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}
          error={!!validationErrors.fullName}
          helperText={validationErrors.fullName}
        />
        <TextField
          margin="dense" label="Email" fullWidth
          value={formData.email || ''}
          onChange={(e) => setFormData({ ...formData, email: e.target.value })}
          error={!!validationErrors.email}
          helperText={validationErrors.email}
        />
        <TextField
          margin="dense" label="Department" fullWidth
          value={formData.department || ''}
          onChange={(e) => setFormData({ ...formData, department: e.target.value })}
          error={!!validationErrors.department}
          helperText={validationErrors.department}
        />
        <TextField
          margin="dense" label="Hire Date" type="date" fullWidth InputLabelProps={{ shrink: true }}
          value={formData.hireDate || ''}
          onChange={(e) => setFormData({ ...formData, hireDate: e.target.value })}
          error={!!validationErrors.hireDate}
          helperText={validationErrors.hireDate}
        />
      </DialogContent>
      <DialogActions>
         {/* DialogActions is used for buttons at the bottom */}
        <Button onClick={handleClose}>Cancel</Button>
        <Button onClick={handleSubmit}>{formData.id ? 'Update' : 'Add'}</Button>
      </DialogActions>
    </Dialog>
  );
};

export default EmployeeForm;


--------------------------------------------

//confirmdialog

import React from 'react';
import {
  Dialog, DialogActions, DialogContent,
  DialogContentText, DialogTitle, Button
} from '@mui/material';

const ConfirmDialog = ({ open, onClose, onConfirm }) => (
  <Dialog open={open} onClose={onClose}>
     {/* Modal confirmation dialog */}
    <DialogTitle>Confirm Deletion</DialogTitle>
    <DialogContent>
      <DialogContentText>
         {/* Message inside dialog */}
        Are you sure you want to delete this employee?
      </DialogContentText>
    </DialogContent>
    <DialogActions>
      <Button onClick={onClose}>No</Button>
      <Button onClick={onConfirm}>Yes</Button>
    </DialogActions>
  </Dialog>
);

export default ConfirmDialog;


--------------------------------

//employeepage 

import React, { useState, useEffect } from 'react';
import {
  Button, Table, TableBody, TableCell, TableContainer,
  TableHead, TableRow, Paper, IconButton
} from '@mui/material';
import { Edit, Delete } from '@mui/icons-material';
import axios from 'axios';
import EmployeeForm from '../components/EmployeeForm';
import ConfirmDialog from '../components/ConfirmDialog';

import {
  getEmployees,
  createEmployee,
  updateEmployee,
  deleteEmployee
} from '../services/employeeService';


const EmployeePage = () => {
  const [employees, setEmployees] = useState([]); // Employee list
  const [formOpen, setFormOpen] = useState(false); // Controls modal visibility
  const [formData, setFormData] = useState({ fullName: '', email: '', department: '', hireDate: '' }); // Form state
  const [deleteId, setDeleteId] = useState(null); // ID of employee to delete

  // Fetch employees from the backend
   const fetchEmployees = async () => {
    try {
      const data = await getEmployees();
      setEmployees(data);
    } catch (error) {
      console.error('Failed to fetch employees:', error);
      alert('Failed to fetch employees.');
    }
  };

  useEffect(() => {
    fetchEmployees(); // Load on mount
  }, []);

  // Submit form (Add or Update)
  const handleFormSubmit = async () => {
    try {
      if (formData.id) {
        await updateEmployee(formData.id, formData);
      } else {
        await createEmployee(formData);
      }
      setFormOpen(false);
      setFormData({ fullName: '', email: '', department: '', hireDate: '' });
      fetchEmployees();
    } catch (error) {
      console.error('Failed to submit form:', error);
      alert('Failed to submit employee data.');
    }
  };

  // Delete employee by ID
 const handleDelete = async () => {
    try {
      await deleteEmployee(deleteId);
      setDeleteId(null);
      fetchEmployees();
    } catch (error) {
      console.error('Failed to delete employee:', error);
      alert('Failed to delete employee.');
    }
  };

  // Populate form for editing
  const openEditForm = (employee) => {
    setFormData(employee);
    setFormOpen(true);
  };

  return (
    <>
      {/* Add Button */}
      <Button variant="contained" onClick={() => setFormOpen(true)} sx={{ mb: 2 }}>
        Add Employee
      </Button>

      {/* Employee Table */}
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>ID</TableCell>
              <TableCell>Full Name</TableCell>
              <TableCell>Email</TableCell>
              <TableCell>Department</TableCell>
              <TableCell>Hire Date</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {employees.map((emp) => (
              <TableRow key={emp.id}>
                <TableCell>{emp.id}</TableCell>
                <TableCell>{emp.fullName}</TableCell>
                <TableCell>{emp.email}</TableCell>
                <TableCell>{emp.department}</TableCell>
                <TableCell>{new Date(emp.hireDate).toLocaleDateString()}</TableCell>
                <TableCell>
                  {/* Edit/Delete Buttons */}
                  <IconButton onClick={() => openEditForm(emp)}><Edit /></IconButton>
                  <IconButton onClick={() => setDeleteId(emp.id)}><Delete /></IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      {/* Add/Edit Form Modal */}
      <EmployeeForm
        open={formOpen}
        handleClose={() => setFormOpen(false)}
        handleSubmit={handleFormSubmit}
        formData={formData}
        setFormData={setFormData}
      />

      {/* Delete Confirmation Dialog */}
      <ConfirmDialog
        open={Boolean(deleteId)}
        onClose={() => setDeleteId(null)}
        onConfirm={handleDelete}
      />
    </>
  );
};

export default EmployeePage;


-------------------------


//homepage

import React from 'react';
import { Typography, Box } from '@mui/material';

const HomePage = () => (
  <Box textAlign="center">
    <Typography variant="h4" gutterBottom>
      Welcome to the Employee Management System
    </Typography>
    <Typography variant="body1">
      Use the navigation bar to manage employees.
    </Typography>
  </Box>
);

export default HomePage;



------------------------

// employeeservice.js


// src/services/employeeService.js
import axios from 'axios';

const API_URL = 'https://localhost:7270/api/employees';

// GET all employees
export const getEmployees = async () => {
  const response = await axios.get(API_URL);
  return response.data;
};

// POST a new employee
export const createEmployee = async (employee) => {
  await axios.post(API_URL, employee);
};

// PUT update employee
export const updateEmployee = async (id, employee) => {
  await axios.put(`${API_URL}/${id}`, employee);
};

// DELETE employee by ID
export const deleteEmployee = async (id) => {
  await axios.delete(`${API_URL}/${id}`);
};












